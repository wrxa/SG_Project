# -*- coding: utf-8 -*-
import ctypes
from platform import system
import math
import numpy

cdll_names = {'Linux': 'libseuif97.so',
              'Windows': 'libseuif97.dll'}

osplat = system()
if (osplat == 'Linux'):
    flib = ctypes.cdll.LoadLibrary(cdll_names[osplat])
    prototype = ctypes.CFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_int)
elif (osplat == 'Windows'):
    flib = ctypes.windll.LoadLibrary(cdll_names[osplat])
    prototype = ctypes.WINFUNCTYPE(ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_int)


def toSIunit_T(ins):
    # 'Translate degC to Kelvon
    return ins + 273.15


def HL_T(T):
    '''
    input: T(°C)
    output: hL(kJ/kg)
    '''
    T = toSIunit_T(T)
    if T > 273.15 and T < 647.096:
        return fromSIunit_h(h4L_p(p4_T(T)))
    else:
        return -1


def toSIunit_p(ins):
    # 'Translate bar to MPa
    return ins / 10


def HL_P(p):
    '''
    input: p(bar)
    output: hL(kJ/kg)
    '''
    p = toSIunit_p(p)
    if p > 0.000611657 and p < 22.06395:
        return fromSIunit_h(h4L_p(p))
    else:
        return -1


def SG_P(p):
    '''
    input: p(bar)
    output: sG(kJ/(kg K))
    '''
    p = toSIunit_p(p)
    if p > 0.000611657 and p < 22.06395:
        if p < 16.529:
            return fromSIunit_s(__s2_pT(p, T4_p(p)))
        else:
            return fromSIunit_s(s3_rhoT(1 / (v3_ph(p, h4V_p(p))), T4_p(p)))
    else:
        return -1


def HG_P(p):
    '''
    input: p(bar)
    output: hG(kJ/kg)
    '''
    p = toSIunit_p(p)
    if p > 0.000611657 and p < 22.06395:
        return fromSIunit_h(h4V_p(p))
    else:
        return -1


def VG_P(p):
    '''
    input: p(bar)
    output: vG(m3/kg)
    '''
    p = toSIunit_p(p)
    if p > 0.000611657 and p < 22.06395:
        if p < 16.529:
            return fromSIunit_v(__v2_pT(p, T4_p(p)))
        else:
            return fromSIunit_v(v3_ph(p, h4V_p(p)))
    else:
        return -1


def VL_P(p):
    '''
    input: p(bar)
    output: vL(m3/kg)
    '''
    p = toSIunit_p(p)
    if p > 0.000611657 and p < 22.06395:
        if p < 16.529:
            vL_p = fromSIunit_v(__v1_pT(p, T4_p(p)))
        else:
            vL_p = fromSIunit_v(v3_ph(p, h4L_p(p)))
    else:
        vL_p = -1
    return vL_p


# 烟焓表
smokeEnthalpyData = [
    [u'温度', u'co2', u'N2', u'O2', u'H2O', u'干空气', u'co', u'h2', u'H2S', u'Ch4', u'C2H4'],
    [100, 172, 130.13, 131.93, 150.18, 130.51, 130.21, 128.96, 154.08, 165.39, 210.61],
    [200, 361.67, 260.6, 267.38, 303.47, 261.94, 262.1, 259.59, 314.86, 353.38, 465.59],
    [300, 564.24, 392.41, 407.48, 461.36, 395.42, 395.67, 390.65, 482.34, 567.75, 758.68],
    [400, 777.44, 526.89, 551.58, 623.6, 532.08, 532.58, 520.86, 658.19, 808.93, 1088.62],
    [500, 1001.78, 664.58, 700.17, 791.55, 672.01, 672.01, 653.17, 841.59, 984.78, 1446.61],
    [600, 1236.76, 805.06, 851.64, 964.68, 814.96, 816.46, 786.41, 1032.51, 1071.84, 1828.88],
    [700, 1475.41, 940.36, 1005.89, 1143.64, 960.75, 961.33, 920.3, 1230.98, 1667.68, 2233.35],
    [800, 1718.95, 1094.65, 1162.32, 1328.11, 1109.05, 1112.06, 1055.12, 1436.98, 1996.36, 2672.98],
    [900, 1972.43, 1243.55, 1319.67, 1517.87, 1259.36, 1262.38, 1190.78, 1646.75, 2336.35, 3105.08],
    [1000, 2226.75, 1393.86, 1480.11, 1713.32, 1411.86, 1415.2, 1327.28, 1863.21, 2696.43, 3567.32]
]

weight = [
    [u'体积百分比 （空气）', 0.0003, 0.7808, 0.2095, 0.0001, 0.0093, 0, 0, 0, 0, 0],
    [u'体积百分比 （窑尾）', 0.304, 0.583, 0.043, 0.07, 0, 0, 0, 0, 0, 0],
    [u'体积百分比 （玻璃）', 0.081, 0.764, 0.105, 0.05, 0, 0, 0, 0, 0, 0],
    [u'体积百分比 （电石）', 0.143, 0.76, 0.083, 0.014, 0, 0, 0, 0, 0, 0],
    [u'体积百分比 （烧结）', 0.05, 0.79, 0.158, -1, -1, 0.002, -1, -1, -1, -1],
    [u'体积百分比（工业硅）', 0.0363, 0.7708, 0.1736, 0.0193, 0, 0, 0, 0, 0, 0]
]
weightccpp = [
    [u'体积百分比 （空气）', 0.033646, 0.7449, 0.1363, 0.07636, 0, 0, 0, 0.008794, 0, 0],
    [u'体积百分比 （窑尾）', 0.304, 0.583, 0.043, 0.07, 0, 0, 0, 0, 0, 0],
    [u'体积百分比 （玻璃）', 0.081, 0.764, 0.105, 0.05, 0, 0, 0, 0, 0, 0],
    [u'体积百分比 （电石）', 0.143, 0.76, 0.083, 0.014, 0, 0, 0, 0, 0, 0],
    [u'体积百分比 （烧结）', 0.05, 0.79, 0.158, -1, -1, 0.002, -1, -1, -1, -1],
    [u'体积百分比（工业硅）', 0.0363, 0.7708, 0.1736, 0.0193, 0, 0, 0, 0, 0, 0]
]


def _gasEnthalpy(var, para, weight):
    param = numpy.mat(weight[int(para)][1:]).T
    for i in range(1, 11):
        if smokeEnthalpyData[i][0] > var:
            tabledata1 = numpy.mat(smokeEnthalpyData[i - 1][1:]) * param
            tabledata2 = numpy.mat(smokeEnthalpyData[i][1:]) * param
            result = tabledata1 + (tabledata2 - tabledata1) * (var - smokeEnthalpyData[i - 1][0]) / 100
            return float(result)
        elif abs(smokeEnthalpyData[i][0] - var) <= 0.0001:
            tabledata = numpy.mat(smokeEnthalpyData[i][1:])
            return float(tabledata * param)
    return -1


def h_kqccpp(var):
    return _gasEnthalpy(var, 0, weightccpp)


def h_kq(var):
    return _gasEnthalpy(var, 0, weight)


def h_sp(var):
    return _gasEnthalpy(var, 1, weight)


def h_bl(var):
    return _gasEnthalpy(var, 2, weight)


def h_ds(var):
    return _gasEnthalpy(var, 3, weight)


def h_sj(var):
    return _gasEnthalpy(var, 4, weight)


def h_g(var):
    return _gasEnthalpy(var, 5, weight)


# def h_nt(var):
#     return _gasEnthalpy(var, 6)


# 饱和区压强计算
def psat_t(t):
    '''
    饱和区已知t(°C)求p(bar)
    '''
    t = t + 273.15
    if t <= 647.096 and t > 273.15:
        psat_t = (__p4_T(t)) * 10
        return psat_t
    return -1


def psat_s(s):
    '''
    饱和区已知s(kJ/(kg K))求p(bar)
    '''
    if s > -0.0001545495919 and s < 9.155759395:
        psat_s = __p4_s(s) * 10
        return psat_s
    return -1


def h_p(p):
    return pt(p, tsat_p(p), 4)


# 饱和区温度计算
def tsat_p(p):
    '''
    饱和区已知p(bar)求t(°C)
    '''
    p = p / 10.000
    if p >= 0.000611657 and p <= 22.06395 + 0.001:
        tsat_p = __t4_P(p) - 273.15
        return tsat_p
    return -1


def tsat_s(s):
    '''
    饱和区已知s(kJ/(kg K))求t(°C)
    '''
    if s > -0.0001545495919 and s < 9.155759395:
        tsat_s = __t4_P(__p4_s(s)) - 273.15
        return tsat_s
    return -1


# 已知 (p,t)
def pt(p, t, pid):
    f = prototype(("seupt", flib),)
    t = round(t, 4)
    p = round(p, 4)
    result = f(p, t, pid)
    return result


def pt2h(p, t):
    f = prototype(("seupt", flib),)
    t = round(t, 4)
    p = round(p, 4)
    result = f(p, t, 4)
    return result

def pt2hw(p, t):
    t = t - 0.0005
    result = pt2h(p, t)
    return result

def pt2hz(p, t):
    t = t + 0.0005
    result = pt2h(p, t)
    return result


def pt2s(p, t):
    f = prototype(("seupt", flib),)
    t = round(t, 4)
    p = round(p, 4)
    result = f(p, t, 5)
    return result


def pt2v(p, t):
    f = prototype(("seupt", flib),)
    t = round(t, 4)
    p = round(p, 4)
    result = f(p, t, 3)
    return result


def pt2x(p, t):
    f = prototype(("seupt", flib),)
    t = round(t, 4)
    p = round(p, 4)
    result = f(p, t, 15)
    return result


# 已知 (p,h)
def ph(p, h, pid):
    f = prototype(("seuph", flib),)
    result = f(p, h, pid)
    return result


def ph2s(p, h):
    f = prototype(("seuph", flib),)
    result = f(p, h, 5)
    return result


def ph2v(p, h):
    f = prototype(("seuph", flib),)
    result = f(p, h, 3)
    return result


def ph2t(p, h):
    f = prototype(("seuph", flib),)
    result = f(p, h, 1)
    return result


def ph2x(p, h):
    f = prototype(("seuph", flib),)
    result = f(p, h, 15)
    return result


# 已知 (p,s)
def ps(p, s, pid):
    f = prototype(("seups", flib),)
    result = f(p, s, pid)
    return result


def ps2t(p, s):
    f = prototype(("seups", flib),)
    result = f(p, s, 1)
    return result


def ps2h(p, s):
    f = prototype(("seups", flib),)
    result = f(p, s, 4)
    return result


def ps2v(p, s):
    f = prototype(("seups", flib),)
    result = f(p, s, 3)
    return result


def ps2x(p, s):
    f = prototype(("seups", flib),)
    result = f(p, s, 15)
    return result


# 已知 (h,s)
def hs(h, s, pid):
    f = prototype(("seuhs", flib),)
    result = f(h, s, pid)
    return result


def hs2t(h, s):
    f = prototype(("seuhs", flib),)
    result = f(h, s, 1)
    return result


def hs2p(h, s):
    f = prototype(("seuhs", flib),)
    result = f(h, s, 0)
    return result


def hs2v(h, s):
    f = prototype(("seuhs", flib),)
    result = f(h, s, 3)
    return result


def hs2x(h, s):
    f = prototype(("seuhs", flib),)
    result = f(h, s, 15)
    return result


# 已知 (t,h)
def th(t, h, pid):
    f = prototype(("seuth", flib),)
    result = f(t, h, pid)
    return result


# 已知 (t,s)
def ts(t, s, pid):
    f = prototype(("seuts", flib),)
    result = f(t, s, pid)
    return result


def ts2p(t, s):
    f = prototype(("seuts", flib),)
    result = f(t, s, 0)
    return result


def ts2v(t, s):
    f = prototype(("seuts", flib),)
    result = f(t, s, 3)
    return result


def ts2h(t, s):
    f = prototype(("seuts", flib),)
    result = f(t, s, 4)
    return result


def ts2x(t, s):
    f = prototype(("seuts", flib),)
    result = f(t, s, 15)
    return result


# 已知 (p,x)
def px(p, x, pid):
    f = prototype(("seupx", flib),)
    result = f(p, x, pid)
    return result


def px2t(p, x):
    f = prototype(("seupx", flib),)
    result = f(p, x, 1)
    return result


def px2h(p, x):
    f = prototype(("seupx", flib),)
    result = f(p, x, 4)
    return result


def px2s(p, x):
    f = prototype(("seupx", flib),)
    result = f(p, x, 5)
    return result


def px2v(p, x):
    f = prototype(("seupx", flib),)
    result = f(p, x, 3)
    return result


# 已知 (t,x)
def tx(t, x, pid):
    f = prototype(("seutx", flib),)
    result = f(t, x, pid)
    return result


def tx2p(t, x):
    f = prototype(("seutx", flib),)
    result = f(t, x, 0)
    return result


def tx2v(t, x):
    f = prototype(("seutx", flib),)
    result = f(t, x, 3)
    return result


def tx2h(t, x):
    f = prototype(("seutx", flib),)
    result = f(t, x, 4)
    return result


def tx2s(t, x):
    f = prototype(("seutx", flib),)
    result = f(t, x, 5)
    return result


# ---------- processing ------------
def ishd(p1, t1, p2):
    f = flib.seuishd
    f.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double]
    f.restype = ctypes.c_double
    result = f(p1, t1, p2)
    return result


def ief(p1, t1, p2, t2):
    f = flib.seuief
    f.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double]
    f.restype = ctypes.c_double
    result = f(p1, t1, p2, t2)
    return result


def __p4_T(T):
    '''
    辅助方法
    '''
    teta = T - 0.23855557567849 / (T - 650.17534844798)
    a = teta ** 2 + 1167.0521452767 * teta - 724213.16703206
    B = -17.073846940092 * teta ** 2 + 12020.82470247 * teta - 3232555.0322333
    C = 14.91510861353 * teta ** 2 - 4823.2657361591 * teta + 405113.40542057
    p4_T = (2 * C / (-B + math.sqrt((B * B - 4 * a * C)))) ** 4
    return p4_T


def __p4_s(s):
    '''
    辅助方法
    '''
    hsat = __h4_s(s)
    if s > -0.0001545495919 and s <= 3.77828134:
        p4_s = hs2p(hsat, s)
    elif s > 3.77828134 and s <= 5.210887663:
        p4_s = hs2p(hsat, s)
    elif s > 5.210887663 and s < 9.155759395:
        p4_s = hs2p(hsat, s)
    else:
        p4_s = -1
    return p4_s


def __t4_P(p):
    '''
    辅助方法
    '''
    beta = math.pow(p, 0.25)
    e = math.pow(beta, 2) - 17.073846940092 * beta + 14.91510861353
    f = 1167.0521452767 * math.pow(beta, 2) + 12020.82470247 * beta - 4823.2657361591
    g = -724213.16703206 * math.pow(beta, 2) - 3232555.0322333 * beta + 405113.40542057
    d = 2 * g / (-f - math.pow((math.pow(f, 2) - 4 * e * g), 0.5))
    t4_p = (650.17534844798 + d - math.pow((math.pow((650.17534844798 + d), 2) - 4 * (-0.23855557567849 + 650.17534844798 * d)), 0.5)) / 2
    return t4_p


def __h4_s(s):
    '''
    辅助方法
    '''
    if s > -0.0001545495919 and s <= 3.77828134:
        ii = [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 7, 8, 12, 12, 14, 14, 16, 20, 20, 22, 24, 28, 32, 32]
        Ji = [14, 36, 3, 16, 0, 5, 4, 36, 4, 16, 24, 18, 24, 1, 4, 2, 4, 1, 22, 10, 12, 28, 8, 3, 0, 6, 8]
        ni = [0.332171191705237, 6.11217706323496E-04, -8.82092478906822, -0.45562819254325, -2.63483840850452E-05, -22.3949661148062, -4.28398660164013, -0.616679338856916, -14.682303110404, 284.523138727299, -113.398503195444, 1156.71380760859, 395.551267359325, -1.54891257229285, 19.4486637751291, -3.57915139457043, -3.35369414148819, -0.66442679633246, 32332.1885383934, 3317.66744667084, -22350.1257931087, 5739538.75852936, 173.226193407919, -3.63968822121321E-02, 8.34596332878346E-07, 5.03611916682674, 65.5444787064505]
        sigma = s / 3.8
        eta = 0
        for i in range(0, 27):
            eta = eta + ni[i] * math.pow((sigma - 1.09), ii[i]) * math.pow((sigma + 0.0000366), Ji[i])
        h4_s = eta * 1700
    elif s > 3.77828134 and s <= 4.41202148223476:
        ii = [0, 0, 0, 0, 2, 3, 4, 4, 5, 5, 6, 7, 7, 7, 10, 10, 10, 32, 32]
        Ji = [1, 4, 10, 16, 1, 36, 3, 16, 20, 36, 4, 2, 28, 32, 14, 32, 36, 0, 6]
        ni = [0.822673364673336, 0.181977213534479, -0.011200026031362, -7.46778287048033E-04, -0.179046263257381, 4.24220110836657E-02, -0.341355823438768, -2.09881740853565, -8.22477343323596, -4.99684082076008, 0.191413958471069, 5.81062241093136E-02, -1655.05498701029, 1588.70443421201, -85.0623535172818, -31771.4386511207, -94589.0406632871, -1.3927384708869E-06, 0.63105253224098]
        sigma = s / 3.8
        eta = 0
        for i in range(0, 19):
            eta = eta + ni[i] * math.pow((sigma - 1.09), ii[i]) * math.pow((sigma + 0.0000366), Ji[i])
        h4_s = eta * 1700
    elif s > 4.41202148223476 and s <= 5.85:
        ii = [0, 0, 0, 1, 1, 5, 6, 7, 8, 8, 12, 16, 22, 22, 24, 36]
        Ji = [0, 3, 4, 0, 12, 36, 12, 16, 2, 20, 32, 36, 2, 32, 7, 20]
        ni = [1.04351280732769, -2.27807912708513, 1.80535256723202, 0.420440834792042, -105721.24483466, 4.36911607493884E+24, -328032702839.753, -6.7868676080427E+15, 7439.57464645363, -3.56896445355761E+19, 1.67590585186801E+31, -3.55028625419105E+37, 396611982166.538, -4.14716268484468E+40, 3.59080103867382E+18, -1.16994334851995E+40]
        sigma = s / 5.9
        eta = 0
        for i in range(0, 16):
            eta = eta + ni[i] * math.pow((sigma - 1.02), ii[i]) * math.pow((sigma - 0.726), Ji[i])
        h4_s = math.pow(eta, 4) * 2800
    elif s > 5.85 and s < 9.155759395:
        ii = [1, 1, 2, 2, 4, 4, 7, 8, 8, 10, 12, 12, 18, 20, 24, 28, 28, 28, 28, 28, 32, 32, 32, 32, 32, 36, 36, 36, 36, 36]
        Ji = [8, 24, 4, 32, 1, 2, 7, 5, 12, 1, 0, 7, 10, 12, 32, 8, 12, 20, 22, 24, 2, 7, 12, 14, 24, 10, 12, 20, 22, 28]
        ni = [-524.581170928788, -9269472.18142218, -237.385107491666, 21077015581.2776, -23.9494562010986, 221.802480294197, -5104725.33393438, 1249813.96109147, 2000084369.96201, -815.158509791035, -157.612685637523, -11420042233.2791, 6.62364680776872E+15, -2.27622818296144E+18, -1.71048081348406E+31, 6.60788766938091E+15, 1.66320055886021E+22, -2.18003784381501E+29, -7.87276140295618E+29, 1.51062329700346E+31, 7957321.70300541, 1.31957647355347E+15, -3.2509706829914E+23, -4.18600611419248E+25, 2.97478906557467E+34, -9.53588761745473E+19, 1.66957699620939E+24, -1.75407764869978E+32, 3.47581490626396E+34, -7.10971318427851E+38]
        sigma1 = s / 5.21
        sigma2 = s / 9.2
        eta = 0
        for i in range(0, 30):
            eta = eta + ni[i] * math.pow((1 / sigma1 - 0.513), ii[i]) * math.pow((sigma2 - 0.524), Ji[i])
        h4_s = math.exp(eta) * 2800
    else:
        h4_s = -1
    return h4_s


def fromSIunit_h(ins):
    return ins


def p4_T(T):
    '''
    辅助方法
    '''
    teta = T - 0.23855557567849 / (T - 650.17534844798)
    a = teta ** 2 + 1167.0521452767 * teta - 724213.16703206
    B = -17.073846940092 * teta ** 2 + 12020.82470247 * teta - 3232555.0322333
    C = 14.91510861353 * teta ** 2 - 4823.2657361591 * teta + 405113.40542057
    return (2 * C / (-B + (B ** 2 - 4 * a * C) ** 0.5)) ** 4


def h1_pT(p, T):
    '''
    辅助方法
    '''
    r = 0.461526
    # 'kJ/(kg K)
    i1 = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 8, 8, 21, 23, 29, 30, 31, 32]
    J1 = [-2, -1, 0, 1, 2, 3, 4, 5, -9, -7, -1, 0, 1, 3, -3, 0, 1, 3, 17, -4, 0, 6, -5, -2, 10, -8, -11, -6, -29, -31, -38, -39, -40, -41]
    n1 = [0.14632971213167, -0.84548187169114, -3.756360367204, 3.3855169168385, -0.95791963387872, 0.15772038513228, -0.016616417199501, 8.1214629983568E-04, 2.8319080123804E-04, -6.0706301565874E-04, -0.018990068218419, -0.032529748770505, -0.021841717175414, -5.283835796993E-05, -4.7184321073267E-04, -3.0001780793026E-04, 4.7661393906987E-05, -4.4141845330846E-06, -7.2694996297594E-16, -3.1679644845054E-05, -2.8270797985312E-06, -8.5205128120103E-10, -2.2425281908E-06, -6.5171222895601E-07, -1.4341729937924E-13, -4.0516996860117E-07, -1.2734301741641E-09, -1.7424871230634E-10, -6.8762131295531E-19, 1.4478307828521E-20, 2.6335781662795E-23, -1.1947622640071E-23, 1.8228094581404E-24, -9.3537087292458E-26]
    p = p / 16.53
    tau = 1386 / T
    g_t = 0.0
    for i in range(0, 34):
        g_t = g_t + (n1[i] * (7.1 - p) ** i1[i] * J1[i] * (tau - 1.222) ** (J1[i] - 1))
    return r * T * tau * g_t


def p3sat_h(h):
    '''
    辅助方法
    '''
    ii = [0, 1, 1, 1, 1, 5, 7, 8, 14, 20, 22, 24, 28, 36]
    Ji = [0, 1, 3, 4, 36, 3, 0, 24, 16, 16, 3, 18, 8, 24]
    ni = [0.600073641753024, -9.36203654849857, 24.6590798594147, -107.014222858224, -91582131580576.8, -8623.32011700662, -23.5837344740032, 2.52304969384128E+17, -3.89718771997719E+18, -3.33775713645296E+22, 35649946963.6328, -1.48547544720641E+26, 3.30611514838798E+18, 8.13641294467829E+37]
    h = h / 2600
    ps = 0.0
    for i in range(0, 14):
        ps = ps + ni[i] * (h - 1.02) ** ii[i] * (h - 0.608) ** Ji[i]
    return ps * 22


def h4L_p(p):
    '''
    辅助方法
    '''
    ps = 0.0
    if p > 0.000611657 and p < 22.06395:
        Ts = T4_p(p)
        if p < 16.529:
            return h1_pT(p, Ts)
        else:
            Low_Bound = 1670.858218
            High_Bound = 2087.23500164864
            while abs(p - ps) > 0.00001:
                hs = (Low_Bound + High_Bound) / 2
                ps = p3sat_h(hs)
                if ps > p:
                    High_Bound = hs
                else:
                    Low_Bound = hs
            return hs
    else:
        return -1


def __s2_pT(p, T):
    '''
    辅助方法
    '''
    r = 0.461526
    # 'kJ/(kg K)
    J0 = [0, 1, -5, -4, -3, -2, -1, 2, 3]
    n0 = [-9.6927686500217, 10.086655968018, -0.005608791128302, 0.071452738081455, -0.40710498223928, 1.4240819171444, -4.383951131945, -0.28408632460772, 0.021268463753307]
    Ir = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 10, 16, 16, 18, 20, 20, 20, 21, 22, 23, 24, 24, 24]
    Jr = [0, 1, 2, 3, 6, 1, 2, 4, 7, 36, 0, 1, 3, 6, 35, 1, 2, 3, 7, 3, 16, 35, 0, 11, 25, 8, 36, 13, 4, 10, 14, 29, 50, 57, 20, 35, 48, 21, 53, 39, 26, 40, 58]
    nr = [-1.7731742473213E-03, -0.017834862292358, -0.045996013696365, -0.057581259083432, -0.05032527872793, -3.3032641670203E-05, -1.8948987516315E-04, -3.9392777243355E-03, -0.043797295650573, -2.6674547914087E-05, 2.0481737692309E-08, 4.3870667284435E-07, -3.227767723857E-05, -1.5033924542148E-03, -0.040668253562649, -7.8847309559367E-10, 1.2790717852285E-08, 4.8225372718507E-07, 2.2922076337661E-06, -1.6714766451061E-11, -2.1171472321355E-03, -23.895741934104, -5.905956432427E-18, -1.2621808899101E-06, -0.038946842435739, 1.1256211360459E-11, -8.2311340897998, 1.9809712802088E-08, 1.0406965210174E-19, -1.0234747095929E-13, -1.0018179379511E-09, -8.0882908646985E-11, 0.10693031879409, -0.33662250574171, 8.9185845355421E-25, 3.0629316876232E-13, -4.2002467698208E-06, -5.9056029685639E-26, 3.7826947613457E-06, -1.2768608934681E-15, 7.3087610595061E-29, 5.5414715350778E-17, -9.436970724121E-07]
    tau = 540 / T
    g0 = math.log(p)
    g0_tau = 0
    for i in range(0, 9):
        g0 = g0 + n0[i] * tau ** J0[i]
        g0_tau = g0_tau + n0[i] * J0[i] * tau ** (J0[i] - 1)
    gr = 0
    gr_tau = 0
    for i in range(0, 43):
        gr = gr + nr[i] * p ** Ir[i] * (tau - 0.5) ** Jr[i]
        gr_tau = gr_tau + nr[i] * p ** Ir[i] * Jr[i] * (tau - 0.5) ** (Jr[i] - 1)
    return r * (tau * (g0_tau + gr_tau) - (g0 + gr))


def T4_p(p):
    '''
    辅助方法
    '''
    beta = p ** 0.25
    e = beta ** 2 - 17.073846940092 * beta + 14.91510861353
    f = 1167.0521452767 * beta ** 2 + 12020.82470247 * beta - 4823.2657361591
    g = -724213.16703206 * beta ** 2 - 3232555.0322333 * beta + 405113.40542057
    d = 2 * g / (-f - (f ** 2 - 4 * e * g) ** 0.5)
    return (650.17534844798 + d - ((650.17534844798 + d) ** 2 - 4 * (-0.23855557567849 + 650.17534844798 * d)) ** 0.5) / 2


def s3_rhoT(rho, T):
    '''
    辅助方法
    '''
    r = 0.461526
    tc = 647.096
    rhoc = 322
    ii = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 9, 9, 10, 10, 11]
    Ji = [0, 0, 1, 2, 7, 10, 12, 23, 2, 6, 15, 17, 0, 2, 6, 7, 22, 26, 0, 2, 4, 16, 26, 0, 2, 4, 26, 1, 3, 26, 0, 2, 26, 2, 26, 2, 26, 0, 1, 26]
    ni = [1.0658070028513, -15.732845290239, 20.944396974307, -7.6867707878716, 2.6185947787954, -2.808078114862, 1.2053369696517, -8.4566812812502E-03, -1.2654315477714, -1.1524407806681, 0.88521043984318, -0.64207765181607, 0.38493460186671, -0.85214708824206, 4.8972281541877, -3.0502617256965, 0.039420536879154, 0.12558408424308, -0.2799932969871, 1.389979956946, -2.018991502357, -8.2147637173963E-03, -0.47596035734923, 0.0439840744735, -0.44476435428739, 0.90572070719733, 0.70522450087967, 0.10770512626332, -0.32913623258954, -0.50871062041158, -0.022175400873096, 0.094260751665092, 0.16436278447961, -0.013503372241348, -0.014834345352472, 5.7922953628084E-04, 3.2308904703711E-03, 8.0964802996215E-05, -1.6557679795037E-04, -4.4923899061815E-05]
    delta = rho / rhoc
    tau = tc / T
    fi = 0
    fitau = 0
    for i in range(1, 40):
        fi = fi + ni[i] * delta ** ii[i] * tau ** Ji[i]
        fitau = fitau + ni[i] * delta ** ii[i] * Ji[i] * tau ** (Ji[i] - 1)
    fi = fi + ni(0) * math.log(delta)
    return r * (tau * fitau - fi)


def v3_ph(p, h):
    '''
    辅助方法
    '''
    h3ab = (2014.64004206875 + 3.74696550136983 * p - 2.19921901054187E-02 * p ** 2 + 8.7513168600995E-05 * p ** 3)
    if h < h3ab:
        ii = [-12, -12, -12, -12, -10, -10, -10, -8, -8, -6, -6, -6, -4, -4, -3, -2, -2, -1, -1, -1, -1, 0, 0, 1, 1, 1, 2, 2, 3, 4, 5, 8]
        Ji = [6, 8, 12, 18, 4, 7, 10, 5, 12, 3, 4, 22, 2, 3, 7, 3, 16, 0, 1, 2, 3, 0, 1, 0, 1, 2, 0, 2, 0, 2, 2, 2]
        ni = [5.29944062966028E-03, -0.170099690234461, 11.1323814312927, -2178.98123145125, -5.06061827980875E-04, 0.556495239685324, -9.43672726094016, -0.297856807561527, 93.9353943717186, 1.92944939465981E-02, 0.421740664704763, -3689141.2628233, -7.37566847600639E-03, -0.354753242424366, -1.99768169338727, 1.15456297059049, 5683.6687581596, 8.08169540124668E-03, 0.172416341519307, 1.04270175292927, -0.297691372792847, 0.560394465163593, 0.275234661176914, -0.148347894866012, -6.51142513478515E-02, -2.92468715386302, 6.64876096952665E-02, 3.52335014263844, -1.46340792313332E-02, -2.24503486668184, 1.10533464706142, -4.08757344495612E-02]
        ps = p / 100
        hs = h / 2100
        vs = 0
        for i in range(0, 32):
            vs = vs + ni[i] * (ps + 0.128) ** ii[i] * (hs - 0.727) ** Ji[i]
        return vs * 0.0088
    else:
        ii = [-12, -12, -8, -8, -8, -8, -8, -8, -6, -6, -6, -6, -6, -6, -4, -4, -4, -3, -3, -2, -2, -1, -1, -1, -1, 0, 1, 1, 2, 2]
        Ji = [0, 1, 0, 1, 3, 6, 7, 8, 0, 1, 2, 5, 6, 10, 3, 6, 10, 0, 2, 1, 2, 0, 1, 4, 5, 0, 0, 1, 2, 6]
        ni = [-2.25196934336318E-09, 1.40674363313486E-08, 2.3378408528056E-06, -3.31833715229001E-05, 1.07956778514318E-03, -0.271382067378863, 1.07202262490333, -0.853821329075382, -2.15214194340526E-05, 7.6965608822273E-04, -4.31136580433864E-03, 0.453342167309331, -0.507749535873652, -100.475154528389, -0.219201924648793, -3.21087965668917, 607.567815637771, 5.57686450685932E-04, 0.18749904002955, 9.05368030448107E-03, 0.285417173048685, 3.29924030996098E-02, 0.239897419685483, 4.82754995951394, -11.8035753702231, 0.169490044091791, -1.79967222507787E-02, 3.71810116332674E-02, -5.36288335065096E-02, 1.6069710109252]
        ps = p / 100
        hs = h / 2800
        vs = 0
        for i in range(0, 30):
            vs = vs + ni[i] * (ps + 0.0661) ** ii[i] * (hs - 0.72) ** Ji[i]
        return vs * 0.0088


def h2_pT(p, T):
    '''
    辅助方法
    '''
    r = 0.461526
    # 'kJ/(kg K)
    J0 = [0, 1, -5, -4, -3, -2, -1, 2, 3]
    n0 = [-9.6927686500217, 10.086655968018, -0.005608791128302, 0.071452738081455, -0.40710498223928, 1.4240819171444, -4.383951131945, -0.28408632460772, 0.021268463753307]
    Ir = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 10, 16, 16, 18, 20, 20, 20, 21, 22, 23, 24, 24, 24]
    Jr = [0, 1, 2, 3, 6, 1, 2, 4, 7, 36, 0, 1, 3, 6, 35, 1, 2, 3, 7, 3, 16, 35, 0, 11, 25, 8, 36, 13, 4, 10, 14, 29, 50, 57, 20, 35, 48, 21, 53, 39, 26, 40, 58]
    nr = [-1.7731742473213E-03, -0.017834862292358, -0.045996013696365, -0.057581259083432, -0.05032527872793, -3.3032641670203E-05, -1.8948987516315E-04, -3.9392777243355E-03, -0.043797295650573, -2.6674547914087E-05, 2.0481737692309E-08, 4.3870667284435E-07, -3.227767723857E-05, -1.5033924542148E-03, -0.040668253562649, -7.8847309559367E-10, 1.2790717852285E-08, 4.8225372718507E-07, 2.2922076337661E-06, -1.6714766451061E-11, -2.1171472321355E-03, -23.895741934104, -5.905956432427E-18, -1.2621808899101E-06, -0.038946842435739, 1.1256211360459E-11, -8.2311340897998, 1.9809712802088E-08, 1.0406965210174E-19, -1.0234747095929E-13, -1.0018179379511E-09, -8.0882908646985E-11, 0.10693031879409, -0.33662250574171, 8.9185845355421E-25, 3.0629316876232E-13, -4.2002467698208E-06, -5.9056029685639E-26, 3.7826947613457E-06, -1.2768608934681E-15, 7.3087610595061E-29, 5.5414715350778E-17, -9.436970724121E-07]
    tau = 540 / T
    g0_tau = 0.0
    for i in range(0, 9):
        g0_tau = g0_tau + n0[i] * J0[i] * tau ** (J0[i] - 1)
    gr_tau = 0.0
    for i in range(0, 43):
        gr_tau = gr_tau + nr[i] * p ** Ir[i] * Jr[i] * (tau - 0.5) ** (Jr[i] - 1)
    return r * T * tau * (g0_tau + gr_tau)


def h4V_p(p):
    '''
    辅助方法
    '''
    hs = -1
    if p > 0.000611657 and p < 22.06395:
        Ts = T4_p(p)
        if p < 16.529:
            return h2_pT(p, Ts)
        else:
            Low_Bound = 2087.23500164864
            High_Bound = 2563.592004 + 5
            # '5 added to extrapolate to ensure even the border ==350ｰC solved.
            ps = 0.0
            while(abs(p - ps) > 0.000001):
                hs = (Low_Bound + High_Bound) / 2
                ps = p3sat_h(hs)
                if ps < p:
                    High_Bound = hs
                else:
                    Low_Bound = hs
    return hs


def fromSIunit_s(ins):
    return ins


def fromSIunit_v(ins):
    return ins


def __v2_pT(p, T):
    '''
    辅助方法
    '''
    r = 0.461526
    # 'kJ/(kg K)
    Ir = [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7, 8, 8, 9, 10, 10, 10, 16, 16, 18, 20, 20, 20, 21, 22, 23, 24, 24, 24]
    Jr = [0, 1, 2, 3, 6, 1, 2, 4, 7, 36, 0, 1, 3, 6, 35, 1, 2, 3, 7, 3, 16, 35, 0, 11, 25, 8, 36, 13, 4, 10, 14, 29, 50, 57, 20, 35, 48, 21, 53, 39, 26, 40, 58]
    nr = [-1.7731742473213E-03, -0.017834862292358, -0.045996013696365, -0.057581259083432, -0.05032527872793, -3.3032641670203E-05, -1.8948987516315E-04, -3.9392777243355E-03, -0.043797295650573, -2.6674547914087E-05, 2.0481737692309E-08, 4.3870667284435E-07, -3.227767723857E-05, -1.5033924542148E-03, -0.040668253562649, -7.8847309559367E-10, 1.2790717852285E-08, 4.8225372718507E-07, 2.2922076337661E-06, -1.6714766451061E-11, -2.1171472321355E-03, -23.895741934104, -5.905956432427E-18, -1.2621808899101E-06, -0.038946842435739, 1.1256211360459E-11, -8.2311340897998, 1.9809712802088E-08, 1.0406965210174E-19, -1.0234747095929E-13, -1.0018179379511E-09, -8.0882908646985E-11, 0.10693031879409, -0.33662250574171, 8.9185845355421E-25, 3.0629316876232E-13, -4.2002467698208E-06, -5.9056029685639E-26, 3.7826947613457E-06, -1.2768608934681E-15, 7.3087610595061E-29, 5.5414715350778E-17, -9.436970724121E-07]
    tau = 540 / T
    g0_pi = 1 / p
    gr_pi = 0.0
    for i in range(0, 43):
        gr_pi = gr_pi + nr[i] * Ir[i] * p ** (Ir[i] - 1) * (tau - 0.5) ** Jr[i]
    return r * T / p * p * (g0_pi + gr_pi) / 1000


def __v1_pT(p, T):
    '''
    辅助方法
    '''
    r = 0.461526  # kJ/(kg K)
    i1 = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 8, 8, 21, 23, 29, 30, 31, 32]
    J1 = [-2, -1, 0, 1, 2, 3, 4, 5, -9, -7, -1, 0, 1, 3, -3, 0, 1, 3, 17, -4, 0, 6, -5, -2, 10, -8, -11, -6, -29, -31, -38, -39, -40, -41]
    n1 = [0.14632971213167, -0.84548187169114, -3.756360367204, 3.3855169168385, -0.95791963387872, 0.15772038513228, -0.016616417199501, 8.1214629983568E-04, 2.8319080123804E-04, -6.0706301565874E-04, -0.018990068218419, -0.032529748770505, -0.021841717175414, -5.283835796993E-05, -4.7184321073267E-04, -3.0001780793026E-04, 4.7661393906987E-05, -4.4141845330846E-06, -7.2694996297594E-16, -3.1679644845054E-05, -2.8270797985312E-06, -8.5205128120103E-10, -2.2425281908E-06, -6.5171222895601E-07, -1.4341729937924E-13, -4.0516996860117E-07, -1.2734301741641E-09, -1.7424871230634E-10, -6.8762131295531E-19, 1.4478307828521E-20, 2.6335781662795E-23, -1.1947622640071E-23, 1.8228094581404E-24, -9.3537087292458E-26]
    ps = p / 16.53
    tau = 1386 / T
    g_p = 0
    for i in range(0, 34):
        g_p = g_p - n1[i] * i1[i] * (7.1 - ps) ** (i1[i] - 1) * (tau - 1.222) ** J1[i]
    v1_pT = r * T / p * ps * g_p / 1000
    return v1_pT
